#!/usr/bin/env php

<?php

require_once __DIR__ . '/../vendor/autoload.php';

use Discord\Builders\MessageBuilder;
use Discord\Discord;
use Discord\Parts\Channel\Message;
use Discord\WebSockets\Event;
use QuoteBot\Bot;
use QuoteBot\TextWithCitation;

$bot = new Bot();

$discord = new Discord(['token' => $bot->token, 'logger' => $bot->logger]);
$discord->on('ready', function (Discord $discord) use ($bot) {
    try {
        $welcomeMessage = MessageBuilder::new()->setContent($bot->welcomeMessage);
        foreach ($bot->channels as $channelId) {
            $bot->logger->info("Send welcome message to channel {$channelId}");
            $channel = $discord->getChannel($channelId);
            if ($channel === null) {
                continue;
            }

            if ($bot->welcomeMessage === '') {
                continue;
            }

            $channel->sendMessage($welcomeMessage);
        }
    } catch (Throwable $th) {
        $bot->logger->error($th->getMessage(), $th->getTrace());
    }

    $discord->on(Event::MESSAGE_CREATE, function (Message $message, Discord $discord) use ($bot) {
        try {
            if ($message->member->id === $bot->id) {
                return;
            }

            if (!in_array($message->channel_id, $bot->channels)) {
                return;
            }

            if ($bot->isOnCooldown()) {
                return;
            }

            $responseQuote = $bot->getResponseQuoteForText($message->content);
            if ($responseQuote->isEmpty()) {
                return;
            }

            $responseMessage = MessageBuilder::new()
                ->setContent(new TextWithCitation($responseQuote, $message->content));
            $discord->getLoop()->addTimer(
                $bot->messageDelayInSeconds,
                fn () => $message->channel->sendMessage($responseMessage)
            );
        } catch (Throwable $th) {
            $bot->logger->error($th->getMessage(), $th->getTrace());
        }
    });
});
$discord->run();
