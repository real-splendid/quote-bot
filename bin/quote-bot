#!/usr/bin/env php

<?php

$applicationPath = realpath(__DIR__ . '/..');
require_once "{$applicationPath}/vendor/autoload.php";

use Discord\Discord;
use Discord\Parts\Channel\Message;
use Discord\Parts\WebSockets\MessageReaction;
use Discord\WebSockets\Event;
use Dotenv\Dotenv;
use Monolog\Handler\StreamHandler;
use Monolog\Logger;
use QuoteBot\Bot;
use QuoteBot\DiscordBotChannel;

$dotenv = Dotenv::createImmutable($applicationPath);
$dotenv->safeLoad();
$settings = require_once "{$applicationPath}/config/settings.php";

$logger = new Logger('bot');
$logger->pushHandler(new StreamHandler('php://stdout', $settings['logLevel']));

$discord = new Discord(['token' => $settings['bot']['token'], 'logger' => $logger]);
$discord->on('ready', function (Discord $discord) use ($settings, $logger) {
    $botChannel = new DiscordBotChannel($discord);
    $bot = new Bot($botChannel, $settings, $logger);

    $discord->on(Event::MESSAGE_CREATE, function (Message $message) use ($bot, $logger) {
        try {
            $bot->handleIncomingMessage(
                $message->author->id,
                $message->channel_id,
                $message->content
            );
        } catch (Throwable $th) {
            $logger->error($th->getMessage(), $th->getTrace());
        }
    });

    $discord->on(
        Event::MESSAGE_REACTION_ADD,
        function (MessageReaction $reaction, Discord $discord) use ($bot, $logger) {
            $channel = $discord->getChannel($reaction->channel_id);
            if ($channel === null) {
                $logger->warning('Failed to get channel');
                return;
            }

            $channel->messages->fetch($reaction->message_id)
                ->done(
                    function (Message $message) use ($bot, $reaction, $logger) {
                        try {
                            // FIXME mb
                            $bot->handleReaction(
                                $reaction->channel_id,
                                $reaction->message_id,
                                $reaction->user_id,
                                $reaction->emoji->name,
                                $message->author->id,
                            );
                        } catch (Throwable $th) {
                            $logger->error($th->getMessage(), $th->getTrace());
                        }
                    },
                    function (Throwable $th) use ($logger) {
                        $logger->error($th->getMessage(), $th->getTrace());
                    }
                );
        }
    );
});
$discord->run();
